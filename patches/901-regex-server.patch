diff --git a/Makefile b/Makefile
index e4c3f5c..049a22a 100644
--- a/Makefile
+++ b/Makefile
@@ -69,6 +69,8 @@ nettle_libs =   `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_DNSSEC     $(PKG_CO
                                                         HAVE_CRYPTOHASH $(PKG_CONFIG) --libs nettle \
                                                         HAVE_NETTLEHASH $(PKG_CONFIG) --libs nettle`
 gmp_libs =      `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_DNSSEC NO_GMP --copy -lgmp`
+regex_cflags =  `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_REGEX $(PKG_CONFIG) --cflags libpcre`
+regex_libs =    `echo $(COPTS) | $(top)/bld/pkg-wrapper HAVE_REGEX $(PKG_CONFIG) --libs libpcre`
 sunos_libs =    `if uname | grep SunOS >/dev/null 2>&1; then echo -lsocket -lnsl -lposix4; fi`
 version =     -DVERSION='\"`$(top)/bld/get-version $(top)`\"'

@@ -90,8 +92,8 @@ hdrs = dnsmasq.h config.h dhcp-protocol.h dhcp6-protocol.h \
 all : $(BUILDDIR)
 	@cd $(BUILDDIR) && $(MAKE) \
  top="$(top)" \
- build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags)" \
- build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs)" \
+ build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags) $(regex_cflags)" \
+ build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs) $(regex_libs)" \
  -f $(top)/Makefile dnsmasq

 mostly_clean :
@@ -115,8 +117,8 @@ all-i18n : $(BUILDDIR)
 	@cd $(BUILDDIR) && $(MAKE) \
  top="$(top)" \
  i18n=-DLOCALEDIR=\'\"$(LOCALEDIR)\"\' \
- build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags)" \
- build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs)"  \
+ build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags) $(regex_cflags)" \
+ build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs) $(regex_libs)"  \
  -f $(top)/Makefile dnsmasq
 	for f in `cd $(PO); echo *.po`; do \
 		cd $(top) && cd $(BUILDDIR) && $(MAKE) top="$(top)" -f $(top)/Makefile $${f%.po}.mo; \
diff --git a/src/config.h b/src/config.h
index 9f69ce3..6790062 100644
--- a/src/config.h
+++ b/src/config.h
@@ -135,6 +135,10 @@ HAVE_LOOP
 HAVE_INOTIFY
    use the Linux inotify facility to efficiently re-read configuration files.

+HAVE_REGEX
+   Define this if you want to link against lib pcre to get regex
+   support in "address=" matches
+
 NO_ID
    Don't report *.bind CHAOS info to clients, forward such requests upstream instead.
 NO_TFTP
@@ -192,6 +196,7 @@ RESOLVFILE
 /* #define HAVE_CONNTRACK */
 /* #define HAVE_CRYPTOHASH */
 /* #define HAVE_DNSSEC */
+/* #define HAVE_REGEX */


 /* Default locations for important system files. */
@@ -382,6 +387,10 @@ static char *compile_opts =
 "no-"
 #endif
 "i18n "
+#ifndef HAVE_REGEX
+"no-"
+#endif
+"regex "
 #if defined(HAVE_LIBIDN2)
 "IDN2 "
 #else
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index e770454..e308399 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -157,6 +157,10 @@ extern int capget(cap_user_header_t header, cap_user_data_t data);
 #include <priv.h>
 #endif

+#ifdef HAVE_REGEX
+#include <pcre.h>
+#endif
+
 /* Backwards compat with 2.83 */
 #if defined(HAVE_NETTLEHASH)
 #  define HAVE_CRYPTOHASH
@@ -533,6 +537,7 @@ union mysockaddr {
 #define SERV_LOOP           8192  /* server causes forwarding loop */
 #define SERV_DO_DNSSEC     16384  /* Validate DNSSEC when using this server */
 #define SERV_GOT_TCP       32768  /* Got some data from the TCP connection */
+#define SERV_IS_REGEX      65536  /* server entry is a regex */

 struct serverfd {
   int fd;
@@ -559,6 +564,10 @@ struct server {
   u32 uid;
 #endif
   struct server *next;
+#ifdef HAVE_REGEX
+  pcre *regex;
+  pcre_extra *pextra;
+#endif
 };

 struct ipsets {
diff --git a/src/forward.c b/src/forward.c
index 8fb0327..a60ad5b 100644
--- a/src/forward.c
+++ b/src/forward.c
@@ -157,11 +157,38 @@ static unsigned int search_servers(time_t now, union all_addr **addrpp, unsigned
       }
     else if (serv->flags & SERV_HAS_DOMAIN)
       {
-	unsigned int domainlen = strlen(serv->domain);
-	char *matchstart = qdomain + namelen - domainlen;
-	if (namelen >= domainlen &&
-	    hostname_isequal(matchstart, serv->domain) &&
-	    (domainlen == 0 || namelen == domainlen || *(matchstart-1) == '.' ))
+	unsigned int domainlen = matchlen;
+	int serverhit = 0;
+
+#ifdef HAVE_REGEX
+	if (serv->flags & SERV_IS_REGEX)
+	  {
+	    int captcount = 0;
+	    if (pcre_fullinfo(serv->regex, serv->pextra, PCRE_INFO_CAPTURECOUNT, &captcount) == 0)
+	      {
+		/* C99 dyn-array, or alloca must be used */
+		int ovect[(captcount + 1) * 3];
+		if (pcre_exec(serv->regex, serv->pextra, qdomain, namelen, 0, 0, ovect, (captcount + 1) * 3) > 0)
+		  {
+		    domainlen = (unsigned int) (ovect[1] - ovect[0]);
+		    if (domainlen >= matchlen)
+		      serverhit = 1;
+		  }
+	      }
+	  }
+	else
+#endif
+	  {
+	    char *matchstart;
+	    domainlen = strlen(serv->domain);
+	    matchstart = qdomain + namelen - domainlen;
+	    if (namelen >= domainlen &&
+	        hostname_isequal(matchstart, serv->domain) &&
+	        (domainlen == 0 || namelen == domainlen || *(matchstart-1) == '.' ))
+	       serverhit = 1;
+	  }
+
+	if (serverhit)
 	  {
 	    if ((serv->flags & SERV_NO_REBIND) && norebind)
 	      *norebind = 1;
@@ -188,6 +215,11 @@ static unsigned int search_servers(time_t now, union all_addr **addrpp, unsigned
 		if (domainlen >= matchlen)
 		  {
 		    *type = serv->flags & (SERV_HAS_DOMAIN | SERV_USE_RESOLV | SERV_NO_REBIND | SERV_DO_DNSSEC);
+#ifdef HAVE_REGEX
+		    if (serv->flags & SERV_IS_REGEX)
+				*domain = qdomain;
+		    else
+#endif
 		    *domain = serv->domain;
 		    matchlen = domainlen;
 		    if (serv->flags & SERV_NO_ADDR)
@@ -248,6 +280,27 @@ static unsigned int search_servers(time_t now, union all_addr **addrpp, unsigned
   return  flags;
 }

+static int match_domain_for_forward(char *domain, struct server *serv)
+{
+  int ret_val = 0;
+  if(serv->flags & SERV_IS_REGEX)
+    {
+#ifdef HAVE_REGEX
+      int captcount = 0;
+      if (pcre_fullinfo(serv->regex, serv->pextra, PCRE_INFO_CAPTURECOUNT, &captcount) == 0)
+	{
+	  /* C99 dyn-array, or alloca must be used */
+	  int ovect[(captcount + 1) * 3];
+	  ret_val = pcre_exec(serv->regex, serv->pextra, domain,
+	                      strlen(domain), 0, 0, ovect, (captcount + 1) * 3) > 0;
+	}
+#endif
+    }
+  else
+    ret_val = hostname_isequal(domain, serv->domain);
+  return ret_val;
+}
+
 static int forward_query(int udpfd, union mysockaddr *udpaddr,
 			 union all_addr *dst_addr, unsigned int dst_iface,
 			 struct dns_header *header, size_t plen, time_t now,
@@ -332,7 +385,12 @@ static int forward_query(int udpfd, union mysockaddr *udpaddr,
 #endif

       /* retry on existing query, send to all available servers  */
-      domain = forward->sentto->domain;
+#ifdef HAVE_REGEX
+      if(forward->sentto->flags & SERV_IS_REGEX)
+          domain = daemon->namebuff;
+      else
+#endif
+          domain = forward->sentto->domain;
       forward->sentto->failed_queries++;
       if (!option_bool(OPT_ORDER))
 	{
@@ -507,7 +565,7 @@ static int forward_query(int udpfd, union mysockaddr *udpaddr,
 	     must be NULL also. */

 	  if (type == (start->flags & SERV_TYPE) &&
-	      (type != SERV_HAS_DOMAIN || hostname_isequal(domain, start->domain)) &&
+	      (type != SERV_HAS_DOMAIN || match_domain_for_forward(domain, start)) &&
 	      !(start->flags & (SERV_LITERAL_ADDRESS | SERV_LOOP)))
 	    {
 	      int fd;
@@ -2057,7 +2115,7 @@ unsigned char *tcp_request(int confd, time_t now,

 		      /* server for wrong domain */
 		      if (type != (last_server->flags & SERV_TYPE) ||
-			  (type == SERV_HAS_DOMAIN && !hostname_isequal(domain, last_server->domain)) ||
+			  (type == SERV_HAS_DOMAIN && !match_domain_for_forward(domain, last_server)) ||
 			  (last_server->flags & (SERV_LITERAL_ADDRESS | SERV_LOOP)))
 			continue;

diff --git a/src/network.c b/src/network.c
index 6cf15a9..951466f 100644
--- a/src/network.c
+++ b/src/network.c
@@ -1653,7 +1653,7 @@ void check_servers(void)
 	    serv->sfd->used = 1;
 	}

-      if (!(serv->flags & SERV_NO_REBIND) && !(serv->flags & SERV_LITERAL_ADDRESS))
+      if (!(serv->flags & (SERV_NO_REBIND | SERV_IS_REGEX)) && !(serv->flags & SERV_LITERAL_ADDRESS))
 	{
 	  if (++count > SERVERS_LOGGED)
 	    continue;
diff --git a/src/option.c b/src/option.c
index 0a72406..a286ccf 100644
--- a/src/option.c
+++ b/src/option.c
@@ -2562,6 +2562,12 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 	    while (rebind || (end = split_chr(arg, '/')))
 	      {
 		char *domain = NULL;
+		char *regex = NULL;
+		char *real_end = arg + strlen(arg);
+		if (*arg == ':' && *(real_end - 1) == ':'){
+			*(real_end - 1) = '\0';
+			regex = arg + 1;
+		}else{
 		/* elide leading dots - they are implied in the search algorithm */
 		while (*arg == '.') arg++;
 		/* # matches everything and becomes a zero length domain string */
@@ -2569,12 +2575,27 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 		  domain = "";
 		else if (strlen (arg) != 0 && !(domain = canonicalise_opt(arg)))
 		  ret_err(gen_err);
+		}
 		serv = opt_malloc(sizeof(struct server));
 		memset(serv, 0, sizeof(struct server));
 		serv->next = newlist;
 		newlist = serv;
 		serv->domain = domain;
-		serv->flags = domain ? SERV_HAS_DOMAIN : SERV_FOR_NODOTS;
+		serv->flags = domain || regex ? SERV_HAS_DOMAIN : SERV_FOR_NODOTS;
+		if (regex){
+#ifdef HAVE_REGEX
+			const char *error;
+			int erroff;
+			serv->regex = pcre_compile(regex, 0, &error, &erroff, NULL);
+
+			if (!serv->regex)
+				ret_err(error);
+			serv->flags |= SERV_IS_REGEX;
+			serv->pextra = pcre_study(serv->regex, 0, &error);
+#else
+			ret_err("Using a regex while server was configured without regex support!");
+#endif
+		}
 		arg = end;
 		if (rebind)
 		  break;
diff --git a/src/rfc1035.c b/src/rfc1035.c
index ea438c2..e5282f0 100644
--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -1582,6 +1582,8 @@ size_t answer_request(struct dns_header *header, char *limit, size_t qlen,

 		      if ((serv->flags & (SERV_HAS_DOMAIN | SERV_NO_ADDR)) != SERV_HAS_DOMAIN)
 		        continue;
+
+		      if (NULL == serv->domain) continue;

 		      domainlen = strlen(serv->domain);
 		      if (domainlen == 0 || domainlen > namelen)
diff --git a/src/util.c b/src/util.c
index 972c60b..757522e 100644
--- a/src/util.c
+++ b/src/util.c
@@ -351,6 +351,8 @@ int hostname_isequal(const char *a, const char *b)
 {
   unsigned int c1, c2;

+  if(NULL == a || NULL == b) return (NULL == a && NULL == b);
+
   do {
     c1 = (unsigned char) *a++;
     c2 = (unsigned char) *b++;
